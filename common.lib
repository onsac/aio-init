# common.lib
declare -r TRUE=0
declare -r FALSE=1
declare -r USER=aio
declare -r TOKEN=onsac:3hevQqWGb2U4wNNA25LF
declare -r STEPS=$(wget -N --level=1 --no-cache --no-cookies --no-check-certificate -qO- https://raw.githubusercontent.com/onsac/aio-init/main/aio-init.sh | grep check_step | wc -l)
declare    STEP=1
declare -r red=$(tput setaf 1)
declare -r green=$(tput setaf 2)
declare -r yelow=$(tput setaf 3)
declare -r blue=$(tput setaf 4)
declare -r normal=$(tput sgr0)
declare -r columns=$(tput cols)
declare -r timestamp=$(date +%Y%m%d-%H%M%S)
declare -r LOG_FILE=/tmp/aio-setup-$timestamp.log
declare -r STEP_FILE=/tmp/aio-setup.step
declare -r COUNT_FILE=/tmp/aio-setup.count
declare -r HOST_FTP='onsac-com.umbler.net'
declare -r USER_FTP='aiointegrador'

print_line()
{
i=1
LINE=""
while [ "$i" -lt "$columns" ]
do
  LINE=$LINE"="
  ((i=i+1))
done
echo $LINE
}

pw1()
{
   wget --no-cache -O /tmp/.init.md http://raw.githubusercontent.com/onsac/aio-init/main/init.md 2>/dev/null
   if [ "$?" -ne "0" ]; then
      return $FALSE
   else
      PARTE=""
      for number in {1..8}
      do
          if [ "$number" -le "6" ]; then
             PARTE=${PARTE}$(grep  "$number -" /tmp/.init.md | cut -b 5)
          else
             PARTE=${PARTE}$(grep  "$number -" /tmp/.init.md | cut -b 5-6)
          fi
      done
      rm /tmp/.init.md 
      echo ${PARTE}
      return $TRUE
   fi
}

pw2()
{
   wget --no-cache -O /tmp/.init.md http://raw.githubusercontent.com/onsac/aio-init/main/init.md 2>/dev/null
   if [ "$?" -ne "0" ]; then
      return $FALSE
   else
      PARTE=""
      for number in {5..7}
      do
          if [ "$number" -eq "5" ]; then
             PARTE=${PARTE}$(grep  "$number -" /tmp/.init.md | cut -b 5-9)
          else
             if [ "$number" -eq "6" ]; then
                PARTE=${PARTE}$(grep  "$number -" /tmp/.init.md | cut -b 5)
             else
                PARTE=${PARTE}$(grep  "$number -" /tmp/.init.md | cut -b 5-6)
             fi
          fi
      done
      rm /tmp/.init.md
      echo ${PARTE}
      return $TRUE
   fi
}

check_step()
{
   seq=$(printf "%03d/%03d" $STEP $STEPS)
   FILE=${STEP_FILE}
   if [ -f "$FILE" ]; then
      if [ "$(grep "$seq" $FILE)" = "" ]; then
         return $TRUE
      else
         print_line
         grep "$seq" $FILE
         print_line
         ((STEP=STEP+1))
         echo "$STEP" >$COUNT_FILE
         return $FALSE
      fi
   else
      touch $FILE
      chmod 777 $FILE
      touch $COUNT_FILE
      chmod 777 $COUNT_FILE
      return $TRUE
   fi
}

set_step()
{
   seq=$(printf "%03d/%03d" $STEP $STEPS)
   texto=$1
   FILE=${STEP_FILE}
   STATUS="OK"
   col=$columns
   ((col=col-30))
   printf "%-10s | %-${col}s | %-10s \n" "$seq" "$texto" "${green}$STATUS${normal}" >>$FILE
   print_line
   printf "%-10s | %-${col}s | %-10s \n" "$seq" "$texto" "${green}$STATUS${normal}"
   print_line
   ((STEP=STEP+1))
   echo "$STEP" >$COUNT_FILE
   return $TRUE
}

stop_step()
{
   seq=$(printf "%03d/%03d" $STEP $STEPS)
   texto=$1
   STATUS="FAIL"  
   col=$columns
   ((col=col-30))
   print_line
   printf "%-10s | %-${col}s | %-10s \n" "$seq" "$texto" "${red}$STATUS${normal}"   
   print_line
   sudo pkill -F /var/run/aio-setup.pid
   exit
}

cont_step()
{
   FILE=${COUNT_FILE}
   if [ -f "$FILE" ]; then
      QTD_STEPS=$(cat $FILE)
      STEP=$QTD_STEPS
   fi
   if [ -f "/tmp/aio-setup.id" ]; then
      ID=$(cat /tmp/aio-setup.id)
   fi 
}

is_root_user()
{
   [ $(id -u) -eq 0 ] && return $TRUE || return $FALSE
}

get_license()
{
  ID_LICENSE=$1
  ID_FILE="/tmp/.${ID_LICENSE}.json"
  if [ -f ${ID_FILE} ]; then
     string=$(cat ${ID_FILE})
     IFS=',' read -r -a array <<< "$string"
     code=$(echo ${array[0]} | sed 's/{code://')     
     subscription=$(echo ${array[0]} | sed 's/subscription://')
     cnpj=$(echo ${array[1]} | sed 's/cnpj://')
     customer=$(echo ${array[2]} | sed 's/customer://')
     sponsorName=$(echo ${array[3]} | sed 's/sponsorName://')
     sponsorEmail=$(echo ${array[4]} | sed 's/sponsorEmail://')
     contact=$(echo ${array[5]} | sed 's/contact://')
     type=$(echo ${array[6]} | sed 's/type://')
     customerNodeId=$(echo ${array[7]} | sed 's/customerNodeId://')
     license=$(echo ${array[8]} | sed 's/license://')
     date=$(echo ${array[9]} | sed 's/date://' | sed 's/.$//')
     return $TRUE
   else
     return $FALSE 
   fi  
}

reg_setup()
{
  ID_LICENSE=$1
  ID_FILE="/tmp/.${ID_LICENSE}.json"
  REG_FILE="${ID_LICENSE}.json"
  if [ -f ${ID_FILE} ]; then
     installDate=$(date +"%Y-%m-%d")
     systemRelease=$(cat /etc/system-release)
     hostname=$(hostname)
     ip=$(ping -c 1 $hostname | grep "icmp_seq=1" | sed 's/.*(//' | sed 's/).*//')
     mac=$(cat /sys/class/net/*/address | head -1)
     echo "{'code':'$code',
          'subscription':'$subscription',
          'cnpj':'$cnpj',
          'customer':'$customer',
          'sponsorName':'$sponsorName',
          'sponsorEmail':'$sponsorEmail',
          'contact':'$contact',
          'type':'$type',
          'customerNodeId':'$customerNodeId',
          'license':'$license',
          'date':'$date',
          'installDate':'$installDate',
          'systemRelease':'$systemRelease',
          'hostname':'$hostname',
          'ip':'$ip',
          'mac':'$mac'}" >$REG_FILE
    return $TRUE
  else
    return $FALSE
  fi
}

upload-setup()
{
  ID_LICENSE=$1
  REG_FILE="${ID_LICENSE}.json"
  if [ -f ${REG_FILE} ]; then
     git config user.name $USER_FTP
     git config user.email $USER_FTP
     git config git-ftp.url $HOST_FTP
     git config git-ftp.user $USER_FTP
     git config git-ftp.password $(pw2)
     git ftp init 
     if [ $? -ne "0" ]; then
        return $FALSE
     fi
     reg_setup $ID_LICENSE
     if [ $? -ne "0" ]; then
        return $FALSE
     fi
     sleep 5
     git add $REG_FILE &> /dev/null
     git commit $REG_FILE -m "prod" &> /dev/null
     git ftp push -f
     if [ $? -ne "0" ]; then
        return $FALSE
     fi
     git config --unset user.name
     git config --unset user.email
     git config --unset git-ftp.url
     git config --unset git-ftp.user
     git config --unset git-ftp.password
     return $TRUE
  else
     return $FALSE
  fi
}
